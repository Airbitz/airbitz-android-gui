import java.util.regex.Pattern

apply plugin: 'android'

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://download.crashlytics.com/maven' }
        maven { url 'https://raw.github.com/embarkmobile/zxing-android-minimal/mvn-repo/maven-repository/' }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    }
}
apply plugin: 'android'
apply plugin: 'crashlytics'

repositories {
    mavenCentral()
    maven {
        url 'http://download.crashlytics.com/maven'
        }

    maven {
        url 'https://raw.github.com/embarkmobile/zxing-android-minimal/mvn-repo/maven-repository/'
    }
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 19
        versionCode 29
        versionName "1.0.31f"
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    productFlavors {

        dev {
            packageName "com.airbitz.dev"
        }

        prod {
            packageName "com.airbitz"
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release {
        }
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                def file = variant.outputFile
                def versionCode = getVersionCode()
                println "APK Version: " + versionCode
                variant.outputFile = new File(file.parent, file.name.replace(".apk", "-" + versionCode + ".apk"))
            }
        }
    }

    sourceSets.main.jni.srcDirs = [] //disable automatic ndk-build
}

// Used for appending the application version code in the generated .apk
def getVersionCode() {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    return matcher.group(1).replace(".", "-")
}

// specify signing properties on the command line
if (hasProperty('storeFile')) {
    println 'Generating a signed package.'
    android.signingConfigs.release.storeFile = file(storeFile)
    android.signingConfigs.release.storePassword = storePassword
    android.signingConfigs.release.keyAlias = keyAlias
    android.signingConfigs.release.keyPassword = keyPassword
} else {
    android.buildTypes.release.signingConfig = null
}


dependencies {
    compile 'me.grantland:autofittextview:0.1.+'
    compile 'com.android.support:support-v4:19.0.+'
    compile 'com.google.android.gms:play-services:4.3.23'
    compile 'com.squareup.picasso:picasso:2.2.0'
    compile 'com.crashlytics.android:crashlytics:1.+'
    compile 'com.squareup.retrofit:retrofit:1.4.1'
    compile 'commons-io:commons-io:2.4'
    compile 'com.google.zxing:core:3.0.1'
}

